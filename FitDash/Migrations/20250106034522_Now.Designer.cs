// <auto-generated />
using System;
using FitDash.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitDash.Migrations
{
    [DbContext(typeof(FitDashContext))]
    [Migration("20250106034522_Now")]
    partial class Now
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FitDash.Domain.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<float?>("Carbs")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Fats")
                        .HasColumnType("real");

                    b.Property<DateTime>("MealDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Proteins")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calories = 400f,
                            Carbs = 50f,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(833),
                            DateUpdated = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(834),
                            Fats = 10f,
                            MealDate = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(831),
                            MealName = "Breakfast",
                            Proteins = 25f,
                            UpdatedBy = "System",
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            Calories = 600f,
                            Carbs = 70f,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(840),
                            DateUpdated = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(841),
                            Fats = 15f,
                            MealDate = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(840),
                            MealName = "Lunch",
                            Proteins = 40f,
                            UpdatedBy = "System",
                            UserID = 2
                        });
                });

            modelBuilder.Entity("FitDash.Domain.ProgressTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("BMI")
                        .HasColumnType("real");

                    b.Property<float?>("BodyFatPercentage")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("ProgressTrackers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BMI = 24.5f,
                            BodyFatPercentage = 20f,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRecorded = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(1006),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = 1,
                            Weight = 70f
                        },
                        new
                        {
                            Id = 2,
                            BMI = 22f,
                            BodyFatPercentage = 18f,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRecorded = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(1011),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = 2,
                            Weight = 60f
                        });
                });

            modelBuilder.Entity("FitDash.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityLevel = "Active",
                            DateCreated = new DateTime(2025, 1, 6, 11, 45, 21, 222, DateTimeKind.Local).AddTicks(200),
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(2025, 1, 6, 11, 45, 21, 222, DateTimeKind.Local).AddTicks(222),
                            Email = "johndoe@example.com",
                            Gender = "Male",
                            Height = 175f,
                            Name = "John Doe",
                            Password = "P@ssword1",
                            Weight = 70f
                        },
                        new
                        {
                            Id = 2,
                            ActivityLevel = "Active",
                            DateCreated = new DateTime(2025, 1, 6, 11, 45, 21, 222, DateTimeKind.Local).AddTicks(228),
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(2025, 1, 6, 11, 45, 21, 222, DateTimeKind.Local).AddTicks(229),
                            Email = "janedoe@example.com",
                            Gender = "Male",
                            Height = 175f,
                            Name = "Jane Doe",
                            Password = "P@ssword1",
                            Weight = 70f
                        });
                });

            modelBuilder.Entity("FitDash.Domain.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("CaloriesBurned")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkoutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkoutName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Workouts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaloriesBurned = 300f,
                            DateCreated = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(605),
                            DateUpdated = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(606),
                            Duration = 30,
                            UserID = 1,
                            WorkoutDate = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(604),
                            WorkoutName = "Cardio"
                        },
                        new
                        {
                            Id = 2,
                            CaloriesBurned = 400f,
                            DateCreated = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(612),
                            DateUpdated = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(612),
                            Duration = 45,
                            UserID = 2,
                            WorkoutDate = new DateTime(2025, 1, 6, 3, 45, 21, 222, DateTimeKind.Utc).AddTicks(611),
                            WorkoutName = "Strength Training"
                        });
                });

            modelBuilder.Entity("FitDash.Domain.Meal", b =>
                {
                    b.HasOne("FitDash.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitDash.Domain.ProgressTracker", b =>
                {
                    b.HasOne("FitDash.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitDash.Domain.Workout", b =>
                {
                    b.HasOne("FitDash.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
