@page "/meals/edit"
@using Microsoft.EntityFrameworkCore
@using FitDash.Domain
@inject IDbContextFactory<FitDash.Data.FitDashContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Meal</h2>
<hr />
@if (Meal is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Meal" OnValidSubmit="UpdateMeal" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Meal.Id" value="@Meal.Id" />
                <div class="mb-3">
                    <label for="userid" class="form-label">UserID:</label>
                    <InputNumber id="userid" @bind-Value="Meal.UserID" class="form-control" />
                    <ValidationMessage For="() => Meal.UserID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="mealname" class="form-label">MealName:</label>
                    <InputText id="mealname" @bind-Value="Meal.MealName" class="form-control" />
                    <ValidationMessage For="() => Meal.MealName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="calories" class="form-label">Calories:</label>
                    <InputNumber id="calories" @bind-Value="Meal.Calories" class="form-control" />
                    <ValidationMessage For="() => Meal.Calories" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="proteins" class="form-label">Proteins:</label>
                    <InputNumber id="proteins" @bind-Value="Meal.Proteins" class="form-control" />
                    <ValidationMessage For="() => Meal.Proteins" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fats" class="form-label">Fats:</label>
                    <InputNumber id="fats" @bind-Value="Meal.Fats" class="form-control" />
                    <ValidationMessage For="() => Meal.Fats" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="carbs" class="form-label">Carbs:</label>
                    <InputNumber id="carbs" @bind-Value="Meal.Carbs" class="form-control" />
                    <ValidationMessage For="() => Meal.Carbs" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="mealdate" class="form-label">MealDate:</label>
                    <InputDate id="mealdate" @bind-Value="Meal.MealDate" class="form-control" />
                    <ValidationMessage For="() => Meal.MealDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Meal.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Meal.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Meal.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Meal.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Meal.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Meal.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Meal.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Meal.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/meals">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Meal? Meal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Meal ??= await context.Meal.FirstOrDefaultAsync(m => m.Id == Id);

        if (Meal is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateMeal()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Meal!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MealExists(Meal!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/meals");
    }

    private bool MealExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Meal.Any(e => e.Id == id);
    }
}
