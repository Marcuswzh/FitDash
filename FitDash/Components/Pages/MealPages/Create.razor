@page "/meals/create"
@using Microsoft.EntityFrameworkCore
@using FitDash.Domain
@inject IDbContextFactory<FitDash.Data.FitDashContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Meal</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Meal" OnValidSubmit="AddMeal" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="userid" class="form-label">UserID:</label> 
                <InputNumber id="userid" @bind-Value="Meal.UserID" class="form-control" /> 
                <ValidationMessage For="() => Meal.UserID" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="mealname" class="form-label">MealName:</label> 
                <InputText id="mealname" @bind-Value="Meal.MealName" class="form-control" /> 
                <ValidationMessage For="() => Meal.MealName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="calories" class="form-label">Calories:</label> 
                <InputNumber id="calories" @bind-Value="Meal.Calories" class="form-control" /> 
                <ValidationMessage For="() => Meal.Calories" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="proteins" class="form-label">Proteins:</label> 
                <InputNumber id="proteins" @bind-Value="Meal.Proteins" class="form-control" /> 
                <ValidationMessage For="() => Meal.Proteins" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="fats" class="form-label">Fats:</label> 
                <InputNumber id="fats" @bind-Value="Meal.Fats" class="form-control" /> 
                <ValidationMessage For="() => Meal.Fats" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="carbs" class="form-label">Carbs:</label> 
                <InputNumber id="carbs" @bind-Value="Meal.Carbs" class="form-control" /> 
                <ValidationMessage For="() => Meal.Carbs" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="mealdate" class="form-label">MealDate:</label> 
                <InputDate id="mealdate" @bind-Value="Meal.MealDate" class="form-control" /> 
                <ValidationMessage For="() => Meal.MealDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Meal.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Meal.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Meal.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Meal.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Meal.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Meal.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Meal.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Meal.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/meals">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Meal Meal { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddMeal()
    {
        using var context = DbFactory.CreateDbContext();
        context.Meal.Add(Meal);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/meals");
    }
}
